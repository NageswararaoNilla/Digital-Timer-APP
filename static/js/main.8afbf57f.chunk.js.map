{"version":3,"sources":["components/DigitalTimer/index.js","App.js","index.js"],"names":["initialState","timeElapsedInSeconds","timerLimitInMinutes","isTimerRunning","DigitalTimer","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","clearTimerInterval","clearInterval","intervalId","onDecreaseTimerLimitInMinutes","setState","prevState","onIncreaseTimerLimitInMinutes","renderTimerLimitController","_this$state","isButtonsDisabled","_jsxs","className","children","_jsx","disabled","onClick","type","onResetTimer","incrementTimeElapsedInSeconds","_this$state2","onStartOrPauseTimer","_this$state3","setInterval","renderTimerController","startOrPauseImgUrl","startOrPauseAltText","src","alt","getElapsedSecondsInTimeFormat","_this$state4","totalRemainingSeconds","minutes","Math","floor","seconds","stringifiedMinutes","stringifiedSeconds","_createClass","key","value","this","labelText","Component","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8afbf57f.chunk.js","sourcesContent":["import {Component} from 'react'\n\nimport './index.css'\n\nconst PLAY_ICON_IMG =\n  'https://assets.ccbp.in/frontend/react-js/play-icon-img.png'\nconst PAUSE_ICON_IMG =\n  'https://assets.ccbp.in/frontend/react-js/pause-icon-img.png'\n\nconst initialState = {\n  timeElapsedInSeconds: 0,\n  timerLimitInMinutes: 25,\n  isTimerRunning: false,\n}\n\nclass DigitalTimer extends Component {\n  state = initialState\n\n  componentWillUnmount() {\n    this.clearTimerInterval()\n  }\n\n  clearTimerInterval = () => clearInterval(this.intervalId)\n\n  onDecreaseTimerLimitInMinutes = () => {\n    const {timerLimitInMinutes} = this.state\n\n    if (timerLimitInMinutes > 1) {\n      this.setState(prevState => ({\n        timerLimitInMinutes: prevState.timerLimitInMinutes - 1,\n      }))\n    }\n  }\n\n  onIncreaseTimerLimitInMinutes = () =>\n    this.setState(prevState => ({\n      timerLimitInMinutes: prevState.timerLimitInMinutes + 1,\n    }))\n\n  renderTimerLimitController = () => {\n    const {timerLimitInMinutes, timeElapsedInSeconds} = this.state\n    const isButtonsDisabled = timeElapsedInSeconds > 0\n\n    return (\n      <div className=\"timer-limit-controller-container\">\n        <p className=\"limit-label\">Set Timer limit</p>\n        <div className=\"timer-limit-controller\">\n          <button\n            className=\"limit-controller-button\"\n            disabled={isButtonsDisabled}\n            onClick={this.onDecreaseTimerLimitInMinutes}\n            type=\"button\"\n          >\n            -\n          </button>\n          <div className=\"limit-label-and-value-container\">\n            <p className=\"limit-value\">{timerLimitInMinutes}</p>\n          </div>\n          <button\n            className=\"limit-controller-button\"\n            disabled={isButtonsDisabled}\n            onClick={this.onIncreaseTimerLimitInMinutes}\n            type=\"button\"\n          >\n            +\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  onResetTimer = () => {\n    this.clearTimerInterval()\n    this.setState(initialState)\n  }\n\n  incrementTimeElapsedInSeconds = () => {\n    const {timerLimitInMinutes, timeElapsedInSeconds} = this.state\n    const isTimerCompleted = timeElapsedInSeconds === timerLimitInMinutes * 60\n\n    if (isTimerCompleted) {\n      this.clearTimerInterval()\n      this.setState({isTimerRunning: false})\n    } else {\n      this.setState(prevState => ({\n        timeElapsedInSeconds: prevState.timeElapsedInSeconds + 1,\n      }))\n    }\n  }\n\n  onStartOrPauseTimer = () => {\n    const {\n      isTimerRunning,\n      timeElapsedInSeconds,\n      timerLimitInMinutes,\n    } = this.state\n    const isTimerCompleted = timeElapsedInSeconds === timerLimitInMinutes * 60\n\n    if (isTimerCompleted) {\n      this.setState({timeElapsedInSeconds: 0})\n    }\n    if (isTimerRunning) {\n      this.clearTimerInterval()\n    } else {\n      this.intervalId = setInterval(this.incrementTimeElapsedInSeconds, 1000)\n    }\n    this.setState(prevState => ({isTimerRunning: !prevState.isTimerRunning}))\n  }\n\n  renderTimerController = () => {\n    const {isTimerRunning} = this.state\n\n    const startOrPauseImgUrl = isTimerRunning ? PAUSE_ICON_IMG : PLAY_ICON_IMG\n\n    const startOrPauseAltText = isTimerRunning ? 'pause icon' : 'play icon'\n\n    return (\n      <div className=\"timer-controller-container\">\n        <button\n          type=\"button\"\n          className=\"timer-controller-btn\"\n          onClick={this.onStartOrPauseTimer}\n        >\n          <img\n            src={startOrPauseImgUrl}\n            alt={startOrPauseAltText}\n            className=\"timer-controller-icon\"\n          />\n          <p className=\"timer-controller-label\">\n            {isTimerRunning ? 'Pause' : 'Start'}\n          </p>\n        </button>\n\n        <button\n          type=\"button\"\n          className=\"timer-controller-btn\"\n          onClick={this.onResetTimer}\n        >\n          <img\n            src=\"https://assets.ccbp.in/frontend/react-js/reset-icon-img.png\"\n            alt=\"reset icon\"\n            className=\"timer-controller-icon\"\n          />\n          <p className=\"timer-controller-label\">Reset</p>\n        </button>\n      </div>\n    )\n  }\n\n  getElapsedSecondsInTimeFormat = () => {\n    const {timerLimitInMinutes, timeElapsedInSeconds} = this.state\n    const totalRemainingSeconds =\n      timerLimitInMinutes * 60 - timeElapsedInSeconds\n    const minutes = Math.floor(totalRemainingSeconds / 60)\n    const seconds = Math.floor(totalRemainingSeconds % 60)\n    const stringifiedMinutes = minutes > 9 ? minutes : `0${minutes}`\n    const stringifiedSeconds = seconds > 9 ? seconds : `0${seconds}`\n\n    return `${stringifiedMinutes}:${stringifiedSeconds}`\n  }\n\n  render() {\n    const {isTimerRunning} = this.state\n    const labelText = isTimerRunning ? 'Running' : 'Paused'\n\n    return (\n      <div className=\"app-container\">\n        <h1 className=\"heading\">Digital Timer</h1>\n        <div className=\"digital-timer-container\">\n          <div className=\"timer-display-container\">\n            <div className=\"elapsed-time-container\">\n              <h1 className=\"elapsed-time\">\n                {this.getElapsedSecondsInTimeFormat()}\n              </h1>\n              <p className=\"timer-state\">{labelText}</p>\n            </div>\n          </div>\n          <div className=\"controls-container\">\n            {this.renderTimerController()}\n            {this.renderTimerLimitController()}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default DigitalTimer\n","import DigitalTimer from './components/DigitalTimer'\n\nimport './App.css'\n\nconst App = () => <DigitalTimer />\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}